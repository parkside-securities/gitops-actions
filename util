configure_ssh () {
    echo "Configuring SSH..."
    # GitHub Actions requires that these be hard coded to /root instead of ~/
    mkdir -p /root/.ssh
    if [[ -z ${SSH_PRIV_KEY:-} ]]; then
        SSH_PRIV_KEY=$(echo "${SSH_PRIV_KEY_B64}" | base64 -d)
    fi
    echo "${SSH_PRIV_KEY}" > /root/.ssh/id_rsa
    chmod 600 /root/.ssh/id_rsa

    ssh-keyscan github.com >> /root/.ssh/known_hosts
}

configure_terraform () {
    echo "Configuring terraform..."
    cat <<- EOF > ~/.terraformrc
	credentials "app.terraform.io" {
		token = "${TERRAFORM_TOKEN}"
	}
EOF
}

configure_environment () {
    if [ -f .envrc ]; then
        direnv allow
        eval $(direnv export bash)
    fi
}

configure_kubectl () {
    echo "Configuring kubectl..."
    mkdir -p ~/.kube
}

mk_artifacts_dir () {
    echo "Creating artifacts dir..."
    path="${1}"
    mkdir -p ${ARTIFACTS_DIR}
}

get_terraform () {
    # Download specified version of terraform
    # Usage: get_terraform <version>
    version="${1}"
    tmp_dir=$(mktemp -d -t cd-XXXXXXXXXX)
    pushd $tmp_dir > /dev/null
    echo "Downloading terraform..."
    curl -LsOf "https://releases.hashicorp.com/terraform/${version}/terraform_${version}_linux_amd64.zip" ||\
        { printf "Failed to download terraform. %d\n" $?; return 1; }
    unzip -q "terraform_${version}_linux_amd64.zip"
    mv ./terraform ${GITHUB_WORKSPACE}/bin
    popd > /dev/null
    rm -rf $tmp_dir
    echo "::debug:: terraform=${GITHUB_WORKSPACE}/bin/terraform"
}

get_kubectl () {
    # Download specified version of kubectl
    # Usage: get_kubectl <version>
    version="${1}"
    tmp_dir=$(mktemp -d -t cd-XXXXXXXXXX)
    pushd $tmp_dir > /dev/null
    echo "Downloading kubectl..."
    curl -LsOf "https://storage.googleapis.com/kubernetes-release/release/v${version}/bin/linux/amd64/kubectl" ||\
        { printf "Failed to download kubectl. %d\n" $?; return 1; }
    mv ./kubectl ${GITHUB_WORKSPACE}/bin
    chmod +x ${GITHUB_WORKSPACE}/bin/kubectl
    popd > /dev/null
    rm -rf $tmp_dir
    echo "::debug:: kubectl=${GITHUB_WORKSPACE}/bin/kubectl"
}

get_helm () {
    # Download specified version of helm
    # Usage: get_helm <version>
    version="${1}"
    tmp_dir=$(mktemp -d -t cd-XXXXXXXXXX)
    pushd $tmp_dir > /dev/null
    echo "Downloading helm..."
    curl -LsOf "https://get.helm.sh/helm-v${version}-linux-amd64.tar.gz" ||\
        { printf "Failed to download helm. %d\n" $?; return 1; }
    tar zxf "helm-v${version}-linux-amd64.tar.gz"
    mv ./linux-amd64/helm ${GITHUB_WORKSPACE}/bin/helm
    popd > /dev/null
    rm -rf $tmp_dir
    echo "::debug:: helm=${GITHUB_WORKSPACE}/bin/helm"
}

get_direnv () {
    # Download specified version of direnv
    # Usage: get_direnv <version>
    version="${1}"
    tmp_dir=$(mktemp -d -t cd-XXXXXXXXXX)
    pushd $tmp_dir > /dev/null
    echo "Downloading direnv..."
    curl -LsOf "https://github.com/direnv/direnv/releases/download/v${version}/direnv.linux-amd64" ||\
        { printf "Failed to download direnv. %d\n" $?; return 1; }
    chmod +x direnv.linux-amd64
    mv direnv.linux-amd64 ${GITHUB_WORKSPACE}/bin/direnv
    popd > /dev/null
    rm -rf $tmp_dir
    echo "::debug:: direnv=${GITHUB_WORKSPACE}/bin/direnv"
}

get_envkey () {
    # Download specified version of envkey-source
    # Usage: get_envkey <version>
    version="${1}"
    tmp_dir=$(mktemp -d -t cd-XXXXXXXXXX)
    pushd $tmp_dir > /dev/null
    echo "Downloading envkey-source..."
    curl -LsOf "https://github.com/envkey/envkey-source/releases/download/v${version}/envkey-source_${version}_linux_amd64.tar.gz" ||\
        { printf "Failed to download envkey. %d\n" $?; return 1; }
    tar zxf "envkey-source_${version}_linux_amd64.tar.gz"
    mv envkey-source ${GITHUB_WORKSPACE}/bin/envkey-source
    popd > /dev/null
    rm -rf $tmp_dir
    echo "::debug:: envkey=${GITHUB_WORKSPACE}/bin/envkey-source"
}

get_aws_iam_authenticator () {
    version="${1}"
    tmp_dir=$(mktemp -d -t cd-XXXXXXXXXX)
    pushd $tmp_dir > /dev/null
    echo "Downloading aws-iam-authenticator..."
    curl -LsOf "https://amazon-eks.s3-us-west-2.amazonaws.com/${version}/2019-08-22/bin/linux/amd64/aws-iam-authenticator" ||\
        { printf "Failed to download envkey. %d\n" $?; return 1; }
    chmod +x aws-iam-authenticator
    mv aws-iam-authenticator ${GITHUB_WORKSPACE}/bin
    popd > /dev/null
    rm -rf $tmp_dir
    echo "::debug:: aws-iam-authenticator=${GITHUB_WORKSPACE}/bin/aws-iam-authenticator"
}

terraform_init () {
    TF_IN_AUTOMATION=true terraform init -no-color -input=false -upgrade=true -lock-timeout=120s 2>&1 | tee init.out
    result=${PIPESTATUS[0]}
    if [ ${result} -ne 0 ]; then
        mv init.out ${ARTIFACTS_DIR}/$(basename $(pwd)).init.out.err
    fi
    return ${result}
}

terraform_plan () {
    TF_IN_AUTOMATION=true terraform plan -no-color -detailed-exitcode -input=false -lock-timeout=120s -out=plan.tfplan 2>&1 | tee plan.out
    case ${PIPESTATUS[0]} in
    0)
        echo "Plan succeeded, diff is empty (no changes)"
        rm plan.out
        result=0
        ;;
    1)
        echo "::error:: Plan failed (error)."
        result=1
        mv plan.out ${ARTIFACTS_DIR}/$(basename $(pwd)).plan.out.err
        ;;
    2)
        echo "Plan succeeded, diff detected"
        mv plan.tfplan ${ARTIFACTS_DIR}/$(basename $(pwd)).tfplan
        mv plan.out ${ARTIFACTS_DIR}/$(basename $(pwd)).plan.out.diff
        ((diffs++))
        result=0
        ;;
    *)
        echo "::warning::  Plan exited with unknown status: ${PIPESTATUS[0]}"
        mv plan.out ${ARTIFACTS_DIR}/$(basename $(pwd)).plan.out.err
        result=1
        ;;
    esac
    return ${result}
}

terraform_apply () {
    planfile="${1}"
    apply_cmd="terraform apply -no-color -input=false -lock-timeout=120s ${planfile}" 
    if [[ ${DRYRUN:-} == "false" ]]; then
        ${apply_cmd} 2>&1 | tee apply.out
        result=${PIPESTATUS[0]}
        if [ ${result} -ne 0 ]; then
            mv apply.out ${ARTIFACTS_DIR}/$(basename $(pwd)).apply.out.err
        else
            mv apply.out ${ARTIFACTS_DIR}/$(basename $(pwd)).apply.out
            ((applies++))
        fi
    else
        echo "DRYRUN mode active... No changes will be made.  The command to run is:"
        echo "${apply_cmd}"
        result=0
    fi
    return ${result}
}

run_terratest_test () {
    local project=$(basename $(pwd))
    pushd tests > /dev/null
    go mod init "github.com/parkside-securities/${project}"
    TF_CLI_ARGS="-no-color" go test -timeout 120m 2>&1 | tee test.out
    result=${PIPESTATUS[0]}
    if [ ${result} -ne 0 ]; then
        echo "::error:: Test failed: ${project}"
        mv test.out ${ARTIFACTS_DIR}/${project}.test.out.err
        ((failures++))
    else
        mv test.out ${ARTIFACTS_DIR}/${project}.test.out
        ((passes++))
    fi
    popd > /dev/null
    return ${result}
}

process_diffs () {
    shopt -s nullglob
    diff_files=(${ARTIFACTS_DIR}/*.plan.out.diff)
    if [ ${#diff_files[@]} -gt 0 ]; then
        echo "::debug:: Found ${#diff_files[@]} diff files."
        local message="### Plans"
        for diff in ${diff_files[@]}; do
            plan_output=$(cat ${diff} | sed -n -r '/-{72}/,/-{72}/{ /-{72}/d; p }')
            message+="
<details><summary>$(basename ${diff%%.*})</summary>

\`\`\`
${plan_output}
\`\`\`
</details>

"
        done
        DIFF_MESSAGE=${message}
    else
        echo "::debug:: No diff files."
    fi
}

process_errors () {
    shopt -s nullglob
    err_files=(${ARTIFACTS_DIR}/*.out.err)
    if [ ${#err_files[@]} -gt 0 ]; then
        echo "::debug:: Found ${#err_files[@]} err files."
        local message="### Errors"
        for err in ${err_files[@]}; do
            err_output=$(cat ${err})
            message+="
<details><summary>$(basename ${err%%.*})</summary>

\`\`\`
${err_output}
\`\`\`
</details>

"
        done
        ERROR_MESSAGE=${message}
    else
        echo "::debug:: No err files."
    fi
}

process_applies () {
    shopt -s nullglob
    apply_files=(${ARTIFACTS_DIR}/*.apply.out)
    if [ ${#apply_files[@]} -gt 0 ]; then
        echo "::debug:: Found ${#apply_files[@]} apply files."
        local message="### Applies"
        for apply in ${apply_files[@]}; do
            apply_output=$(cat ${apply})
            message+="
<details><summary>$(basename ${apply%%.*})</summary>

\`\`\`
${apply_output}
\`\`\`
</details>

"
        done
        APPLY_MESSAGE=${message}
    else
        echo "::debug:: No apply files."
    fi
}

process_passes () {
    shopt -s nullglob
    pass_files=(${ARTIFACTS_DIR}/*.test.out)
    if [ ${#pass_files[@]} -gt 0 ]; then
        echo "::debug:: Found ${#pass_files[@]} pass files."
        local message="### Pass"
        for pass in ${pass_files[@]}; do
            pass_output=$(cat ${pass})
            message+="
<details><summary>$(basename ${pass%%.*})</summary>

\`\`\`
${pass_output}
\`\`\`
</details>

"
        done
        PASS_MESSAGE=${message}
        echo "::debug:: ${PASS_MESSAGE}"
    else
        echo "::debug:: No pass files."
    fi
}

comment_on_pr () {
    if [ -f ${GITHUB_EVENT_PATH} ]; then
        echo "::debug:: Updating PR..." 
        body="$(echo "${PASS_MESSAGE:-} ${ERROR_MESSAGE:-} ${DIFF_MESSAGE:-} ${APPLY_MESSAGE:-}" | jq -R --slurp '{body: .}')"
        echo "${body}" > ${ARTIFACTS_DIR}/report.json
        comments_url=$(cat ${GITHUB_EVENT_PATH} | jq -r .pull_request.comments_url)
        echo "::debug:: comments_url=${comments_url}"
        curl_out=$(curl -s -S -H "Authorization: token ${GITHUB_TOKEN}" --header "Content-Type: application/json" --data @${ARTIFACTS_DIR}/report.json "${comments_url}")
        echo "::debug:: ${curl_out}"
    else
      echo "::debug:: Can't find a GitHub event... Not commenting"
      return 0
    fi
}

get_diff_dirs () {
    # Returns a list of directories changed between BASE and HEAD.
    base=${1}
    dirs=""
    git fetch --prune --unshallow > /dev/null
    diffs=$(git --no-pager diff --name-only ${base} -- | cut -d/ -f1 | uniq)
    for dir in ${diffs}; do
        if [ -d ${dir} ]; then
            dirs+="${dir}:"
        fi
    done
    echo "::set-output name=change_dirs::${dirs}"
}